from pandas import DataFrame
from pyspark.sql.functions import explode, struct, lit, col, array

TJ_ALS_recs = DataFrame({'genres': ['Drama', 'Drama', 'Comedy', 'Comedy|Romance', 'Comedy|Romance', 'Comedy|Drama|R', 'Thriller', 'Adventure|Fant', 'Adventure|Fant', 'Action', 'Action|Adventu', 'Action|Drama|W', 'Action|Sci-Fi|'],
'pred_rating': [3.89, 3.61, 3.55, 3.29, 3.27, 3.26, 4.96, 4.85, 4.7, 4.55, 4.54, 4.3, 4.26],
'title': ['Seven Pounds (2008)', 'Cure, The (1995)', 'Kiss Me, Guido (1997', "You've Got Mail (199", '10 Things I Hate Abo', 'Corrina, Corrina (19', 'Fear (1996)', 'Lord of the Rings: T', 'Lord of the Rings: T', 'No Holds Barred (198', 'Lord of the Rings: T', 'Band of Brothers (20', 'Transformers (2007)'],
'userId': ['Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Taylor', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane', 'Jane']})

R = DataFrame({'Coco': ['4', '5', '2', None],
 'Shrek': ['3', '4', None, '5'],
 'Sneakers': ['3', '2', '5', '2'],
 'Swing Kids': ['4', None, '2', '2'],
 'User': ['James Alking', 'Elvira Marroquin', 'Jack Bauer', 'Julia James']})

def get_ALS_recs(list_of_user_names, recs = TJ_ALS_recs):
    """ 
    Returns recommendations generated by ALS algorithm
    
    Parameters:
      - list_of_user_names: List or array of user names
      - recs: ALS-generated recommendations
      
    Returns: Pyspark dataframe of recommendations for user names submitted in list_of_usre_names.
    """
    if len(list_of_user_names) == 0:
        print ("None")
    elif len(list_of_user_names) == 1:
        print (recs[recs.userId == list_of_user_names[0]].sort_values(by=['user_name','pred_rating'], ascending = [0,0]))
    elif len(list_of_user_names) == 2:
        print (recs)
    return None

def to_long(df, by = ["User"]):
    """ 
    Converts traditional or "wide" dataframe into a "row-based" dataframe, also known as a "dense" or "long" dataframe.
    
    Parameters:
      - df: array of columns with column names
      - by: name of column which serves as
      
    Returns: Row-based dataframe with no null values
    """
    cols = [c for c in df.columns if c not in by]
    # Create and explode an array of (column_name, column_value) structs
    kvs = explode(array([
      struct(lit(c).alias("Movie"), col(c).alias("Rating")) for c in cols
    ])).alias("kvs")
    return df.select(by + [kvs]).select(by + ["kvs.Movie", "kvs.Rating"]).filter("rating IS NOT NULL")

# Print Spark Dataframe in console to save as csv
def printSpark(sparkdf):
    for index, row in sparkdf.toPandas().iterrows():
        print(','.join([str(e) if e else "" for e in row]))

# Get list like representation of dataframe
def getdict(dataframe):
    return dataframe.to_dict('list')